# build
FROM nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04 AS devel

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive\
    SHELL=/bin/bash

# install dependencies
RUN apt-get update --yes
RUN apt-get install --yes --no-install-recommends\
    curl\
    wget\
    git\
    cmake\
    build-essential\
    libssl-dev\
    pkg-config\
    libudev-dev\
    llvm\
    clang\
    libclang-dev\
    gcc\
    unzip\
    tar

# setup rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# workspace
WORKDIR /workspace

# copy the source code
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY .cargo ./.cargo

# download onnxruntime
RUN wget https://github.com/microsoft/onnxruntime/releases/download/v1.19.0/onnxruntime-linux-x64-gpu-1.19.0.tgz
RUN tar -xvf onnxruntime-linux-x64-gpu-1.19.0.tgz
RUN mv onnxruntime-linux-x64-gpu-1.19.0 onnxruntime
ENV LD_LIBRARY_PATH=/workspace/onnxruntime/lib:$LD_LIBRARY_PATH
ENV ORT_LIB_LOCATION=/workspace/onnxruntime/lib

# build the project
RUN cargo build --release --features cuda

# runtime
FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04 as runtime

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ENV DEBIAN_FRONTEND=noninteractive\
    SHELL=/bin/bash

WORKDIR /workspace

# copy the built binary
COPY --from=devel /workspace/target/release .
COPY --from=devel /workspace/onnxruntime ./onnxruntime

# run the binary
CMD ["./tagger"]
